9. Haga la traza del siguiente algoritmo y explique que sucede en cada instrucción. 
int main ( ) { 
  int i, j, n; 
  int *arr; 
  int **mat; 
  std::cin >> n; 
  arr = new int [n]; 
  mat = new int *[n]; 
  for ( i=0; i < n -1; i++ ) { 
    arr[i] =  i; 
    mat[i] = new int[n]; 
    for ( j=0; j < n -1; j++) { 
      mat[i][j] = i + j; 
UNIVERSIDAD CENTRAL DE VENEZUELA 
FACULTAD DE CIENCIAS 
ESCUELA DE COMPUTACIÓN 
ALGORITMOS Y ESTRUCTURAS DE DATOS 
  4 
    } 
  } 
i = n – 1; 
while ( i>=0 ) { 
  std::cout << arr[i] << std::endl; 
  delete []mat[i]; 
  i = i - 1; 
} 
 
delete []arr; 
delete []mat; 
// en este momento, ¿a quién apunta arr?. ¿Podría acceder arr[1]? 
  return 0; 
} 


Aquí tienes la traza y explicación de cada instrucción del algoritmo:

1. Declaraciones
Se declaran variables para índices, tamaño, un arreglo de enteros (arr) y una matriz dinámica (mat).
2. Entrada de datos
El usuario ingresa el valor de n.
3. Reservas de memoria
arr apunta a un arreglo de n enteros.
mat apunta a un arreglo de n punteros a enteros (será una matriz).
4. Llenado de arreglos y matriz
Para i de 0 a n-2:
arr[i] se llena con el valor de i.
mat[i] apunta a un nuevo arreglo de n enteros.
Para j de 0 a n-2:
mat[i][j] se llena con la suma i + j.
5. Liberación de memoria y salida
Se inicializa i en n-1.
Mientras i >= 0:
Imprime arr[i].
Libera la memoria del arreglo mat[i] (aunque para i == n-1, nunca se reservó memoria para mat[n-1], lo que puede causar un error).
Decrementa i.
6. Liberación final
Libera la memoria de arr y de mat (el arreglo de punteros).
7. Preguntas finales
¿A quién apunta arr después de delete []arr;?

arr queda apuntando a una zona de memoria liberada (puntero colgante o "dangling pointer").
¿Podría acceder arr[1]?

No, acceder a arr[1] después de liberar la memoria es comportamiento indefinido y puede causar un error o corrupción de datos.
Resumen de lo que sucede
Se reserva memoria para un arreglo y una matriz.
Se llenan con valores.
Se imprime el arreglo en orden inverso y se libera la memoria de cada fila de la matriz.
Finalmente, se libera la memoria de los arreglos principales.
Error potencial: Se intenta liberar mat[n-1], pero nunca se reservó memoria para esa fila, lo que puede causar un fallo de segmentación.
¿Te gustaría ver un diagrama de memoria para este proceso?